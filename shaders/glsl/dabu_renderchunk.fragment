// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;
varying vec3 chunkPos;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "util.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

vec3 glowDetect(vec4 diffuse) {
  // 252/255 = max glow (0.988)
  // 253/255 = partial glow (0.992)
  if (diffuse.a > 0.988 && diffuse.a < 0.993) {
    vec3 glow = diffuse.rgb * diffuse.rgb;
    if (diffuse.a > 0.989) return 0.4 * glow;
    return glow;
  }
  return vec3(0.0);
}

vec3 glowDetectC(sampler2D tex, vec2 uv) {
  return glowDetect(textureLod(tex, uv, 0.0));
}

vec3 applyGlowEffect(sampler2D tex, vec2 uv) {
  vec3 glow = glowDetect(texture2D(tex, uv));
  
  #ifdef GLOW_LEAK_AMOUNT
    vec2 texSize = vec2(textureSize(tex, 0));
    vec2 offset = 1.0 / texSize;
    
    vec3 c1 = glowDetect(texture2D(tex, uv - offset));
    vec3 c3 = glowDetect(texture2D(tex, uv + offset*vec2(-1, 1)));
    vec3 c5 = glowDetect(texture2D(tex, uv + offset));
    vec3 c7 = glowDetect(texture2D(tex, uv + offset*vec2(1, -1)));
    
    vec3 g = max(max(c1, c3), max(c5, c7));
    g = (g*0.7 + 0.2)*g;
    
    glow = max(glow, g*GLOW_LEAK_AMOUNT);
  #endif
  
  return glow * 1.5;
}

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#if !defined(ALWAYS_LIT)
	diffuse *= texture2D( TEXTURE_1, uv1 );
#endif

#ifndef BLEND
    vec3 glow = applyGlowEffect(TEXTURE_0, uv0);
    diffuse.rgb += glow;
	#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

vec3 cp = fract (chunkPos.xyz);

	if
	(
			((chunkPos.x < 0.0625 || chunkPos.x > 15.9375) && (chunkPos.y < 0.0625 || chunkPos.y > 15.9375)) ||
			((chunkPos.x < 0.0625 || chunkPos.x > 15.9375) && (chunkPos.z < 0.0625 || chunkPos.z > 15.9375)) ||
			((chunkPos.y < 0.0625 || chunkPos.y > 15.9375) && (chunkPos.z < 0.0625 || chunkPos.z > 15.9375))
	)
		diffuse.rgb =mix(diffuse.rgb,vec3(0.0f, 0.0f, 1.0f),0.2f);
else
	if
	(
		((chunkPos.x < 0.03125 || chunkPos.x > 15.96875) || (chunkPos.z < 0.03125 || chunkPos.z > 15.96875)) &&
		(
			((cp.x < 0.03125 || cp.x > 0.96875) && (cp.y < 0.03125 || cp.y > 0.96875)) ||
			((cp.x < 0.03125 || cp.x > 0.96875) && (cp.z < 0.03125 || cp.z > 0.96875)) ||
			((cp.y < 0.03125 || cp.y > 0.96875) && (cp.z < 0.03125 || cp.z > 0.96875))
		)
	)
		diffuse.rgb = (diffuse.rgb/0.4f)*(vec3(1.0f, 1.0f, 1.0f) - diffuse.rgb);

    cp.x=cp.x*3.0-1.0;
    cp.z=cp.z*3.0-1.0;
	cp.x -=0.05;
	cp.z -=0.1;

if(color.r>0.999&&color.g>50.0/255.0-0.005&&color.g<50.0/255.0+0.005&&color.b<0.005){
	if((cp.x<=0.8&&cp.x>=0.1&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.75&&cp.x>=0.65&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.35&&cp.x>=0.25&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.25&&cp.x>=0.15&&cp.z<=0.55&&cp.z>=0.25)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.45)
	 ||(cp.x<=0.35&&cp.x>=0.15&&cp.z<=0.75&&cp.z>=0.65)||(cp.x<=0.45&&cp.x>=0.25&&cp.z<=0.35&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>244.0/255.0-0.005&&color.r<244.0/255.0+0.005&&color.g>27.0/255.0-0.005&&color.g<27.0/255.0+0.005&&color.b<0.005){
	if((cp.x<=0.8&&cp.x>=0.1&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.75&&cp.x>=0.65&&cp.z<=0.75&&cp.z>=0.25)
	 ||(cp.x<=0.25&&cp.x>=0.15&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.45)
	 ||(cp.x<=0.35&&cp.x>=0.25&&cp.z<=0.55&&cp.z>=0.45)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>234.0/255.0-0.005&&color.r<234.0/255.0+0.005&&color.g>6.0/255.0-0.005&&color.g<6.0/255.0+0.005&&color.b<0.005){
	if((cp.x<=0.8&&cp.x>=0.1&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.75&&cp.x>=0.65&&cp.z<=0.75&&cp.z>=0.25)
	 ||(cp.x<=0.25&&cp.x>=0.15&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.45&&cp.x>=0.25&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.45&&cp.x>=0.25&&cp.z<=0.35&&cp.z>=0.25)||(cp.x<=0.45&&cp.x>=0.25&&cp.z<=0.75&&cp.z>=0.65)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>224.0/255.0-0.005&&color.r<224.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.8&&cp.x>=0.1&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.75&&cp.x>=0.65&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.35&&cp.x>=0.25&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.25&&cp.x>=0.15&&cp.z<=0.75&&cp.z>=0.45)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.55&&cp.z>=0.25)
	 ||(cp.x<=0.35&&cp.x>=0.15&&cp.z<=0.35&&cp.z>=0.25)||(cp.x<=0.45&&cp.x>=0.25&&cp.z<=0.75&&cp.z>=0.65)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>204.0/255.0-0.005&&color.r<204.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.8&&cp.x>=0.1&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.75&&cp.x>=0.65&&cp.z<=0.75&&cp.z>=0.25)
	 ||(cp.x<=0.25&&cp.x>=0.15&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.25)
	 ||(cp.x<=0.35&&cp.x>=0.25&&cp.z<=0.75&&cp.z>=0.65)||(cp.x<=0.35&&cp.x>=0.25&&cp.z<=0.35&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

	cp.x +=0.05;
if(color.r>214.0/255.0-0.005&&color.r<214.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.75&&cp.x>=0.65&&cp.z<=0.75&&cp.z>=0.25)
	 ||(cp.x<=0.35&&cp.x>=0.25&&cp.z<=0.75&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>193.0/255.0-0.005&&color.r<193.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.35)||(cp.x<=0.65&&cp.x>=0.55&&cp.z<=0.75&&cp.z>=0.45)
	 ||(cp.x<=0.65&&cp.x>=0.35&&cp.z<=0.35&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.75&&cp.z>=0.65)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>183.0/255.0-0.005&&color.r<183.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.55&&cp.z<=0.75&&cp.z>=0.25)
	 ||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.75&&cp.z>=0.65)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.35&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>173.0/255.0-0.005&&color.r<173.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.75&&cp.z>=0.65)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>163.0/255.0-0.005&&color.r<163.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.55&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.55&&cp.z<=0.75&&cp.z>=0.35)
	 ||(cp.x<=0.55&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.65)||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.35&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>153.0/255.0-0.005&&color.r<153.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.55&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.55&&cp.z<=0.75&&cp.z>=0.45)
	 ||(cp.x<=0.55&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.65)||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.35&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>142.0/255.0-0.005&&color.r<142.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.55&&cp.z<=0.75&&cp.z>=0.45)
	 ||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.55&&cp.z>=0.45)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>132.0/255.0-0.005&&color.r<132.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.35&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.75&&cp.z>=0.65)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>122.0/255.0-0.005&&color.r<122.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.55&&cp.z>=0.45)
	 ||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.45)||(cp.x<=0.65&&cp.x>=0.55&&cp.z<=0.55&&cp.z>=0.25)
	 ||(cp.x<=0.55&&cp.x>=0.35&&cp.z<=0.35&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.45&&cp.z<=0.75&&cp.z>=0.65)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}

if(color.r>112.0/255.0-0.005&&color.r<112.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.75&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}
if(color.r>76.0/255.0-0.005&&color.r<76.0/255.0+0.005&&color.g+color.b<0.005){
	if((cp.x<=0.85&&cp.x>=0.15&&cp.z<=0.15&&cp.z>=0.05)||(cp.x<=0.45&&cp.x>=0.35&&cp.z<=0.75&&cp.z>=0.25)||(cp.x<=0.65&&cp.x>=0.55&&cp.z<=0.75&&cp.z>=0.25)
	 ||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.75&&cp.z>=0.65)||(cp.x<=0.55&&cp.x>=0.45&&cp.z<=0.35&&cp.z>=0.25)){
diffuse.rgba = mix(diffuse.rgba,vec4(1.0,1.0,1.0,1.0), 0.7);
	}
}


#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}
